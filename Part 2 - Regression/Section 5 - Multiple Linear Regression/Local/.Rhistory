#Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN=function(x) mean(x,na.rm=TRUE)),
dataset$Age)
#Importing the dataset
dataset = read.csv('Data.csv')
#Importing the dataset
dataset = read.csv('Data.csv')
#Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN=function(x) mean(x,na.rm=TRUE)),
dataset$Age)
setwd("~/Machine Learning A-Z/Part 1 - Data Preprocessing/Local")
#Data Preprocessing
#Importing the dataset
dataset = read.csv('Data.csv')
#Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN=function(x) mean(x,na.rm=TRUE)),
dataset$Age)
View(dataset)
View(dataset)
#Data Preprocessing
#Importing the dataset
dataset = read.csv('Data.csv')
#Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN=function(x) mean(x,na.rm=TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN=function(x) mean(x,na.rm=TRUE)),
dataset$Salary)
View(dataset)
View(dataset)
# Encoding categorial data
dataset$Country = factor(dataset$Country
, levels = c('France', 'Spain', 'Germany')
, labels = c(1,2,3)
)
#Data Preprocessing
#Importing the dataset
dataset = read.csv('Data.csv')
#Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN=function(x) mean(x,na.rm=TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN=function(x) mean(x,na.rm=TRUE)),
dataset$Salary)
# Encoding categorial data
dataset$Country = factor(dataset$Country
, levels = c('France', 'Spain', 'Germany')
, labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased
, levels = c('No', 'Yes')
, labels = c(0,1)
)
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
test_set = subset(dataset, split == FALSE)
#Feature Scaling (Normalization or Standarization)
training_set = scale(training_set)
View(training_set)
#Feature Scaling (Normalization or Standarization)
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
View(training_set)
View(training_set)
setwd("~/Machine Learning A-Z/Part 2 - Regression/Section 4 - Simple Linear Regression/Local")
setwd("~/Machine Learning A-Z/Part 2 - Regression/Section 4 - Simple Linear Regression/Local")
# Simple Linear Regression
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Simple Linear Regression to the Training Set
regressor = lm(formula = Salary ~ YearsExperience
, data = training_set
)
View(regressor)
View(regressor)
summary regressor
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
View(dataset)
View(dataset)
install.packages('ggplot2')
library(ggplot2)
# Simple Linear Regression
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Simple Linear Regression to the Training Set
regressor = lm(formula = Salary ~ YearsExperience
, data = training_set
)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary)
, color = 'red'  ) +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set))
, color = 'blue' ) +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary)
, color = 'red'  ) +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set))
, color = 'blue' ) +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of Experience') +
ylab('Salary')
setwd("~/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression/Local")
setwd("~/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression/Local")
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
View(dataset)
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Encoding categorial data
dataset$Country = factor(dataset$State
, levels = c('New York', 'California', 'Florida')
, labels = c(1,2,3)
)
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Encoding categorial data
dataset$State = factor(dataset$State
, levels = c('New York', 'California', 'Florida')
, labels = c(1,2,3)
)
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorial data
dataset$State = factor(dataset$State
, levels = c('New York', 'California', 'Florida')
, labels = c(1,2,3)
)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
regressor = lm( formula = Profit ~ .
data = training_set
)
regressor = lm( formula = Profit ~ .
,data = training_set
)
summary(regressor)
regressor = lm( formula = Profit ~ R.D.Spend
,data = training_set
)
summary(regressor)
regressor = lm( formula = Profit ~ .
,data = training_set
)
#Predicting the Test set results
y_pred = predict(regressor , newdata = test_set)
y_pred
View(test_set)
View(test_set)
# Only R.D is significant.
regressor = lm( formula = Profit ~ R.D.Spend
,data = training_set
)
#Predicting the Test set results
y_pred = predict(regressor , newdata = test_set)
y_pred
View(test_set)
View(test_set)
regressor = lm( formula = Profit ~ .
,data = training_set
)
regressor = lm( formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State
, data = dataset
)
summary(regressor)
regressor = lm( formula = Profit ~ R.D.Spend + Administration + Marketing.Spend
, data = dataset
)
summary(regressor)
regressor = lm( formula = Profit ~ R.D.Spend + Marketing.Spend
, data = dataset
)
summary(regressor)
regressor = lm( formula = Profit ~ R.D.Spend
, data = dataset
)
summary(regressor)
print(length(dataset))
print(sumry)
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorial data
dataset$State = factor(dataset$State
, levels = c('New York', 'California', 'Florida')
, labels = c(1,2,3)
)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# regressor = lm( formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State
#               , data = training_set
#               )
regressor = lm( formula = Profit ~ .
,data = training_set
)
# Only R.D is significant.
#regressor = lm( formula = Profit ~ R.D.Spend
#                ,data = training_set
#)
#Predicting the Test set results
y_pred = predict(regressor , newdata = test_set)
#Building the optimal model using Backward Elimnination
regressor = lm( formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State
, data = dataset
)
summary(regressor)
regressor = lm( formula = Profit ~ R.D.Spend + Administration + Marketing.Spend
, data = dataset
)
summary(regressor)
regressor = lm( formula = Profit ~ R.D.Spend + Marketing.Spend
, data = dataset
)
summary(regressor)
regressor = lm( formula = Profit ~ R.D.Spend
, data = dataset
)
summary(regressor)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(length(dataset))]
sumry = backwardElimination(training_set, SL)
print(sumry)
